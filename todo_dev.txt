1. Implement minimum password reqs  DONE
2. Implement password encryption    DONE
3. Set up HTTPS with Let's Encrypt  DONE
4. Improve UI design
5. Add pip install lines to init_server  DONE
6. Check for tables update in SQL during init_server
7. Provide special feedback if no chat is found (e.g., "No chat is found. Would you like to create one?")    DONE
8. Check error message when pressing 'e' to exit the app    DONE
9. Fix error message when manually closing WebSocket client
10. Fix client_ws not closing on its own
11. Ensure logic is correct during errors
12. Fix 'client_2 not found' error (possibly directory searching or similar issue)
13. Check for display clearing with os.system('cls')
14. Research encrypted at rest
15. Seperate table for session_tokens (user keys, rename) and email verif tokens    SESSION TOKENS DONE
16. Fix username showing up when not logged in (after register)

import bcrypt

# Input password
password = "your_password_here".encode("utf-8")

# Generate a salt and hash the password
hashed_password = bcrypt.hashpw(password, bcrypt.gensalt())

print("Hashed password:", hashed_password)


import smtplib
import random
from email.message import EmailMessage

def generate_verification_code():
    """Generate a 6-digit random verification code."""
    return str(random.randint(100000, 999999))

def send_verification_email(user_email, username, code):
    """Send a verification email with the code."""
    sender_email = "your_email@example.com"
    sender_password = "your_email_password"

    # Create the email
    msg = EmailMessage()
    msg["Subject"] = "Verify Your Email for ChatCLI"
    msg["From"] = sender_email
    msg["To"] = user_email

    # Email body
    msg.set_content(f"""
    Hi {username},

    Thank you for signing up for ChatCLI! To complete your registration, please verify your email address.

    Your verification code is: {code}

    Enter this code in the app to verify your email.

    If you didnâ€™t create an account, you can safely ignore this email.

    Thanks,
    The ChatCLI Team
    """)

    try:
        # Connect to the SMTP server and send the email
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()  # Secure the connection
            server.login(sender_email, sender_password)
            server.send_message(msg)
        print("Verification email sent successfully!")
    except Exception as e:
        print(f"Error sending email: {e}")

# Example Usage
username = "new_user"
user_email = "new_user@example.com"
code = generate_verification_code()
send_verification_email(user_email, username, code)

